eHash(filename):
    hashList = []
    for i in range(1,numChunks+1):
        bashcommand = "md5sum "+str(filename)+"-"+str(i)
        Hash = subprocess.check_output(['bash','-c', bashcommand])
        Hash = Hash.split(' ')
        hashList.append(Hash[0])
    return hashList

def dumpContent(filename):
    fileContent = []
    with open(filename, 'rb') as f:
        reader = csv.reader(f)

        # read file row by row
        for row in reader:
            fileContent.append(row)

    return fileContent

def listFiles():
    filename = 'listFiles.csv'
    fileExist = False
    if(os.path.exists(filename)):
        fileExist = True

    if not fileExist:
        bashCommand = "ls -l | awk '{print $6, $7, $8, $9}'"
        fileList = subprocess.check_output(['bash','-c', bashCommand])
        fileList = fileList.split('\n')
        numFiles = len(fileList)
        with open(filename, 'wb') as csvfile:
            filewriter = csv.writer(csvfile, delimiter=',',quotechar='|', quoting=csv.QUOTE_MINIMAL)
            for i in range(1, numFiles-1):
                item = fileList[i].split(' ')
                timeStamp = str(item[0]) + str(item[1]) + str(item[2])
                fileName = str(item[3])
                fsp = FileSplitter()
                fsp.doWork(fileName, 'split')
                hashes = computeHash(fileName)
                print hashes
                filewriter.writerow([fileName, hashes[0], hashes[1], hashes[2], hashes[3], timeStamp])
    else:
        print("in else statement beta")    

    fileContents = dumpContent('listFiles.csv')
    print fileContents
    # sending csv file to supernode
    msg = pickle.dumps(fileContents)
    TCP_IP = str(ipAddr)
    TCP_PORT = 9005 
    BUFFER_SIZE = 1024
    print "TCP->" + TCP_IP

    p = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    p.connect((str(TCP_IP), TCP_PORT))
    p.send(msg)
    p.close()
    print "me tera baap hu BRO!!!!"
    return

if __name__ == '__main__':
    #for Initial SuperNode assigning
    superNodeAssign()
    #For Checking Node Status
    alive = threading.Thread(target = aliveChecker, name = 'alive')
    alive.start()


    #for file sharing between sender and receiver
    # sharing()